- hosts: test
  connection: local
  become: no
 
  vars_prompt:
  - name: "vsphere_username"
    prompt: "Enter your vsphere username "
    private: yes
  - name: "vsphere_password"
    prompt: "Enter your vsphere password "
    private: yes
  vars:
    #vsphere_hostname: "{{ lookup('env', 'VSPHERE_HOSTNAME') }}"
    #vsphere_username: "{{ lookup('env', 'VSPHERE_USERNAME') }}"
    #vsphere_password: "{{ lookup('env', 'VSPHERE_PASSWORD') }}"
    vsphere_hostname: "esxi"
    esxi_hostname: "esxi"
    vsphere_datacenter: ha-datacenter
    vsphere_datastore: datastore1
    vsphere_iso_datastore: datastore1
    vm_network: "VM Network"
    iso_image: /root/ansible/iso/CentOS-7-x86_64-Minimal-1810.iso
 
  tasks:
 
  - command: mktemp -d
    delegate_to: localhost
    register: tempdir
 
  - command: mktemp -d
    delegate_to: localhost
    register: loopdir
 
  - name: mount source iso image
    command: mount -o loop "{{ iso_image }}" "{{ loopdir.stdout }}"
    delegate_to: localhost
 
  - name: copy source iso image contents to custom iso
    shell: cp -a -R "{{ loopdir.stdout }}"/. "{{ tempdir.stdout }}"
    delegate_to: localhost
 
  - name: create kickstart file on custom iso
    template:
      src: "{{ playbook_dir }}/templates/centos7-kickstart.cfg.j2"
      dest: "{{ tempdir.stdout }}/ks.cfg"
 
  - name: Update boot options
    command: sed -i 's/append\ initrd\=initrd.img/append initrd=initrd.img\ ks\=cdrom:\/ks.cfg/' "{{ tempdir.stdout }}"/isolinux/isolinux.cfg
    delegate_to: localhost
 
  - name: create custom iso image
    #command: mkisofs -r -N -allow-leading-dots -d -J -T -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -V "{{ inventory_hostname_short }}" -boot-load-size 4 -boot-info-table -o build/{{ inventory_hostname }}.iso {{ tempdir.stdout }}
    command: genisoimage -o build/{{ inventory_hostname }}.iso -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -J -R -v -T -V 'CentOS 7 x86_64' {{ tempdir.stdout }}
    delegate_to: localhost

  - name: add checksum to custom iso image
    command: implantisomd5 build/{{ inventory_hostname }}.iso
    delegate_to: localhost
 
  - name: unmount source iso image
    command: umount "{{ loopdir.stdout }}"
    delegate_to: localhost
 
  - name: upload custom ISO for Kickstart
    vsphere_copy:
      hostname: "{{ vsphere_hostname }}"
      username: "{{ vsphere_username }}"
      password: "{{ vsphere_password }}"
      datacenter: "{{ vsphere_datacenter }}"
      datastore: "{{ vsphere_datastore }}"
      src: build/{{ inventory_hostname }}.iso
      path: ISOs/{{ inventory_hostname }}.iso
      validate_certs: False
 
  - name: cleanup temp directories
    file:
      path: "{{ loopdir.stdout }}"
      state: absent
 
  - name: cleanup temp directories
    file:
      path: "{{ tempdir.stdout }}"
      state: absent
 
  - name: cleanup custom iso
    file:
      path: build/{{ inventory_hostname }}.iso
      state: absent
 
  - name: create vm
    vmware_guest:
      validate_certs: False
      hostname: "{{ vsphere_hostname }}"
      username: "{{ vsphere_username }}"
      password: "{{ vsphere_password }}"
      datacenter: "{{ vsphere_datacenter }}"
      esxi_hostname: "{{ esxi_hostname }}"
      folder: /
      name: "{{ inventory_hostname }}"
      guest_id: centos64Guest
      state: poweredon
      disk:
        - size_gb: 32
          type: thin
          datastore: "{{ vsphere_datastore }}"
      networks:
        - name: "{{ vm_network }}"
      hardware:
        memory_mb: 2048
        num_cpus: 2
      cdrom:
        type: iso
        iso_path: "[{{ vsphere_iso_datastore }}] /ISOs/{{ inventory_hostname }}.iso"


  - name: delete custom iso image from datastore
    when: False
    vsphere_copy:
      validate_certs: False
      hostname: '{{ vsphere_hostname }}'
      username: '{{ vsphere_username }}'
      password: '{{ vsphere_password }}'
      datacenter: "{{ vsphere_datacenter }}"
      datastore: "{{ vsphere_datastore }}"
      path: ISOs/{{ inventory_hostname }}.iso
      state: absent
delegate_to: localhost
