## Round Robin load balance syslog output between 4 destinations
rulseset(name="dest-01") {
    action(name="dest-01" type="omfwd" Target="192.168.1.11" Port="514" Protocol="tcp" queue.filename="dest-01.queue" queue.size="1000000" queue.type="LinkedList" queue.saveOnShutdown="on")
    stop
}
rulseset(name="dest-02") {
    action(name="dest-02" type="omfwd" Target="192.168.1.12" Port="514" Protocol="tcp" queue.filename="dest-02.queue" queue.size="1000000" queue.type="LinkedList" queue.saveOnShutdown="on")
    stop
}
rulseset(name="dest-03") {
    action(name="dest-03" type="omfwd" Target="192.168.1.13" Port="514" Protocol="tcp" queue.filename="dest-03.queue" queue.size="1000000" queue.type="LinkedList" queue.saveOnShutdown="on")
    stop
}
rulseset(name="dest-04") {
    action(name="dest-04" type="omfwd" Target="192.168.1.14" Port="514" Protocol="tcp" queue.filename="dest-04.queue" queue.size="1000000" queue.type="LinkedList" queue.saveOnShutdown="on")
    stop
}

template(name="subseconds" type="string" string="%timegenerated:::date-subseconds%")
module(load="imudp" threads="8" timeRequery="8" batchSize="128" SchedulingPolicy="fifo" SchedulingPriority="10")

input(name="syslog_in" type="imdup" port="514" rcvbufSize="64m")

set $!subsecs = exec_template("subseconds");
if ($!subsecs % 4 == 0) then call dest-01
if ($!subsecs % 4 == 1) then call dest-02
if ($!subsecs % 4 == 2) then call dest-03
if ($!subsecs % 4 == 3) then call dest-04
